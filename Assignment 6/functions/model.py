"""model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ZFHrkIuoFxdxokfHVB7zEm_6wKO0aB1
"""

# CNN model definition
import torch
import torch.nn as nn
import torch.nn.functional as F


class Net(nn.Module):
    def __init__(self, dropout=0.05):
        super(Net, self).__init__()
        self.dropout = dropout
        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, 3, padding=1),  # input: 3*32*32, output: 32*32*32, RF: 3*3
            nn.BatchNorm2d(32),
            nn.Dropout(self.dropout)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 32, 3, padding=1),  # input: 32*32*32, output: 32*32*32, RF: 5*5
            nn.BatchNorm2d(32),
            nn.Dropout(self.dropout)
        )

        self.conv3 = nn.Sequential(
            nn.Conv2d(32, 64, 3, stride=2, padding=1),  # input: 32*32*32, output: 64*16*16, RF: 7*7
            nn.BatchNorm2d(64),
            nn.Dropout(self.dropout)
        )

        self.conv4 = nn.Sequential(
            nn.Conv2d(64, 32, 1),  # input: 64*16*16, output: 32*16*16, RF: 7*7
            # nn.MaxPool2d(2, 2),
            nn.Dropout(self.dropout)
        )

        self.conv5 = nn.Sequential(
            nn.Conv2d(32, 64, 3, padding=1),  # input: 32*16*16, output: 64*16*16, RF: 11*11
            nn.BatchNorm2d(64),
            nn.Dropout(self.dropout)
        )

        self.conv6 = nn.Sequential(
            nn.Conv2d(64, 64, 3, stride=2, padding=1),  # input: 64*16*16, output: 64*8*8, RF: 15*15
            nn.BatchNorm2d(64),
            nn.Dropout(self.dropout)
        )

        self.conv7 = nn.Sequential(
            nn.Conv2d(64, 32, 1),  # input: 64*8*8, output: 32*8*8, RF: 15*15
            # nn.MaxPool2d(2, 2),
            # nn.Dropout(self.dropout)
        )

        # implementing dilation convolution
        self.conv8 = nn.Sequential(
            nn.Conv2d(32, 64, 3, padding=1, dilation=2),  # input: 32*8*8, output: 64*6*6, RF: 31*31
            nn.BatchNorm2d(64),
            nn.Dropout(self.dropout)
        )

        self.conv9 = nn.Sequential(
            nn.Conv2d(64, 64, 3, padding=1),  # input: 64*6*6, output: 64*6*6, RF: 39*39
            nn.BatchNorm2d(64),
            nn.Dropout(self.dropout)
        )

        self.conv10 = nn.Sequential(
            nn.Conv2d(64, 64, 3, padding=1),  # input: 64*6*6, output: 64*6*6, RF: 47*47
            nn.BatchNorm2d(64),
            nn.Dropout(self.dropout)
        )

        # implementing depthwise seperable convolution
        self.conv11 = nn.Sequential(  # depthwise seperable convolution
            nn.Conv2d(64, 64, kernel_size=3, padding=0, groups=64),
            # depthwise......input: 64*6*6, output: 64*4*4, RF: 55*55
            nn.Conv2d(64, 64, kernel_size=1),  # pointwise.......input: 64*4*4, output: 64*4*4, RF: 55*55

            nn.AvgPool2d(2, 2),  # GAP......input: 64*4*4, output: 64*2*2, RF: 59*59
            # nn.BatchNorm2d(16),
            # nn.Dropout(0.10)
        )

        self.fc = nn.Linear(64 * 2 * 2, 10)

    def forward(self, x):
        x = F.relu(self.conv3(F.relu(self.conv2(F.relu(self.conv1(x))))))
        x = F.relu(self.conv6(F.relu(self.conv5(F.relu(self.conv4(x))))))
        x = F.relu(self.conv9(F.relu(self.conv8(F.relu(self.conv7(x))))))

        x = F.relu(self.conv10(x))
        x = self.conv11(x)
        x = x.view(x.size(0), -1)

        x = self.fc(x)

        x = F.log_softmax(x, dim=1)
        return x